generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model tasks {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id    String?         @db.Uuid
  title         String          @db.VarChar(255)
  description   String?
  assigned_to   String?         @db.Uuid
  status        String?         @default("pending") @db.VarChar(50)
  priority      String?         @default("medium") @db.VarChar(50)
  due_date      DateTime?       @db.Timestamp(6)
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  checklist     checklist[]
  subtasks      subtasks[]
  task_comments task_comments[]
  task_files    task_files[]
  users         users?          @relation(fields: [assigned_to], references: [id], onUpdate: NoAction)
  project       projects?       @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([priority], map: "idx_tasks_priority")
  @@index([status], map: "idx_tasks_status")
}

model users {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String          @db.VarChar(100)
  email         String          @unique @db.VarChar(255)
  password      String
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  updated_at    DateTime?       @default(now()) @db.Timestamp(6)
  notifications notifications[]
  projects      projects[]
  task_comments task_comments[]
  tasks         tasks[]
  team_members  team_members[]
  teams         teams[]

  @@index([email], map: "idx_users_email")
}

model checklist {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task_id String?  @db.Uuid
  item    String   @db.VarChar(255)
  checked Boolean? @default(false)
  tasks   tasks?   @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model notifications {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id String?  @db.Uuid
  message String
  is_read Boolean? @default(false)
  users   users?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model projects {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  team_id    String?   @db.Uuid
  name       String    @db.VarChar(100)
  created_by String?   @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [created_by], references: [id], onUpdate: NoAction)
  teams      teams?    @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tasks      tasks[]

  @@index([team_id], map: "idx_projects_team")
}

model subtasks {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task_id String?  @db.Uuid
  title   String   @db.VarChar(255)
  status  Boolean? @default(false)
  tasks   tasks?   @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model task_comments {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task_id    String?   @db.Uuid
  user_id    String?   @db.Uuid
  content    String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  tasks      tasks?    @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([task_id], map: "idx_task_comments_task")
}

model task_files {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task_id   String? @db.Uuid
  file_path String
  tasks     tasks?  @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model team_members {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  team_id   String?   @db.Uuid
  user_id   String?   @db.Uuid
  role      String?   @db.VarChar(50)
  joined_at DateTime? @default(now()) @db.Timestamp(6)
  teams     teams?    @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model teams {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String         @unique @db.VarChar(100)
  created_by   String?        @db.Uuid
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  projects     projects[]
  team_members team_members[]
  users        users?         @relation(fields: [created_by], references: [id], onUpdate: NoAction)
}